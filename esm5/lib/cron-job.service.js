import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { IntervalEnum } from '@polpware/fe-utilities';
import { parseExpression } from 'cron-parser';
import * as moment from 'moment';
import * as i0 from "@angular/core";
var CronJobService = /** @class */ (function () {
    function CronJobService() {
    }
    CronJobService.prototype.parseCronExpr = function (source, target) {
        var a = parseExpression(source);
        // Case 1 (every year)
        if (a.fields.month.length == 1 && a.fields.dayOfMonth.length == 1) {
            target.recurrence = IntervalEnum.Year;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 1 &&
            a.fields.dayOfWeek.length == 8) {
            target.recurrence = IntervalEnum.Month;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 31 &&
            a.fields.dayOfWeek.length == 1) {
            target.recurrence = IntervalEnum.Week;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 31 &&
            a.fields.dayOfWeek.length == 8) {
            target.recurrence = IntervalEnum.Day;
        }
        else {
            target.recurrence = IntervalEnum.Custom;
        }
        // A utc time 
        var today = new Date();
        var timeInUtc = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate(), a.fields.hour[0] || 0, a.fields.minute[0] || 0));
        // Time
        target.time = timeInUtc;
    };
    CronJobService.prototype.composeCronExpr = function (source) {
        // IsRecurrent true
        // Convert it into Utc time
        var utc = new Date(source.time);
        var timeWrapper = moment(utc);
        var hour = timeWrapper.utc().hour();
        if (source.recurrence == IntervalEnum.Year) {
            return utc.getMinutes() + " " + hour + " " + source.dayOfMonth + " " + source.monthOfYear + " *";
        }
        else if (source.recurrence == IntervalEnum.Month) {
            return utc.getMinutes() + " " + hour + " " + source.dayOfMonth + " * *";
        }
        else if (source.recurrence == IntervalEnum.Week) {
            return utc.getMinutes() + " " + hour + " * * " + source.dayOfWeek;
        }
        else if (source.recurrence == IntervalEnum.Day) {
            return utc.getMinutes() + " " + hour + " * * *";
        }
        else if (source.recurrence == IntervalEnum.Custom) {
            return source.customExpr;
        }
        return '';
    };
    CronJobService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CronJobService_Factory() { return new CronJobService(); }, token: CronJobService, providedIn: "root" });
    CronJobService = __decorate([
        Injectable({
            providedIn: 'root'
        }),
        __metadata("design:paramtypes", [])
    ], CronJobService);
    return CronJobService;
}());
export { CronJobService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi1qb2Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb2xwd2FyZS9jcm9uLWpvYi8iLCJzb3VyY2VzIjpbImxpYi9jcm9uLWpvYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDOztBQU1qQztJQUVJO0lBQWdCLENBQUM7SUFFakIsc0NBQWEsR0FBYixVQUFjLE1BQWMsRUFBRSxNQUFxQjtRQUMvQyxJQUFNLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEMsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQy9ELE1BQU0sQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztTQUN6QzthQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEVBQUU7WUFDbEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUM7WUFDL0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNoQyxNQUFNLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7U0FDMUM7YUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFO1lBQ2xDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxFQUFFO1lBQ2hDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDaEMsTUFBTSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsSUFBSSxDQUFDO1NBQ3pDO2FBQU0sSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksRUFBRTtZQUNsQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksRUFBRTtZQUNoQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLEdBQUcsQ0FBQztTQUN4QzthQUFNO1lBQ0gsTUFBTSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDO1NBQzNDO1FBRUQsY0FBYztRQUNkLElBQU0sS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDekIsSUFBTSxTQUFTLEdBQUcsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEVBQ25ELEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFDaEIsS0FBSyxDQUFDLE9BQU8sRUFBRSxFQUNmLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDckIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixPQUFPO1FBQ1AsTUFBTSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7SUFDNUIsQ0FBQztJQUVELHdDQUFlLEdBQWYsVUFBZ0IsTUFBcUI7UUFDakMsbUJBQW1CO1FBRW5CLDJCQUEyQjtRQUMzQixJQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLElBQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUV0QyxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLElBQUksRUFBRTtZQUN4QyxPQUFVLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBSSxJQUFJLFNBQUksTUFBTSxDQUFDLFVBQVUsU0FBSSxNQUFNLENBQUMsV0FBVyxPQUFJLENBQUM7U0FDckY7YUFBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLEtBQUssRUFBRTtZQUNoRCxPQUFVLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBSSxJQUFJLFNBQUksTUFBTSxDQUFDLFVBQVUsU0FBTSxDQUFDO1NBQ2pFO2FBQU0sSUFBSSxNQUFNLENBQUMsVUFBVSxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUU7WUFDL0MsT0FBVSxHQUFHLENBQUMsVUFBVSxFQUFFLFNBQUksSUFBSSxhQUFRLE1BQU0sQ0FBQyxTQUFXLENBQUM7U0FDaEU7YUFBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLEdBQUcsRUFBRTtZQUM5QyxPQUFVLEdBQUcsQ0FBQyxVQUFVLEVBQUUsU0FBSSxJQUFJLFdBQVEsQ0FBQztTQUM5QzthQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsSUFBSSxZQUFZLENBQUMsTUFBTSxFQUFFO1lBQ2pELE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQztTQUM1QjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQzs7SUExRFEsY0FBYztRQUgxQixVQUFVLENBQUM7WUFDUixVQUFVLEVBQUUsTUFBTTtTQUNyQixDQUFDOztPQUNXLGNBQWMsQ0EyRDFCO3lCQXBFRDtDQW9FQyxBQTNERCxJQTJEQztTQTNEWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW50ZXJ2YWxFbnVtIH0gZnJvbSAnQHBvbHB3YXJlL2ZlLXV0aWxpdGllcyc7XG5pbXBvcnQgeyBwYXJzZUV4cHJlc3Npb24gfSBmcm9tICdjcm9uLXBhcnNlcic7XG5pbXBvcnQgKiBhcyBtb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7IElTY2hlZHVsZVRpbWUgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIENyb25Kb2JTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBwYXJzZUNyb25FeHByKHNvdXJjZTogc3RyaW5nLCB0YXJnZXQ6IElTY2hlZHVsZVRpbWUpIHtcbiAgICAgICAgY29uc3QgYSA9IHBhcnNlRXhwcmVzc2lvbihzb3VyY2UpO1xuXG4gICAgICAgIC8vIENhc2UgMSAoZXZlcnkgeWVhcilcbiAgICAgICAgaWYgKGEuZmllbGRzLm1vbnRoLmxlbmd0aCA9PSAxICYmIGEuZmllbGRzLmRheU9mTW9udGgubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHRhcmdldC5yZWN1cnJlbmNlID0gSW50ZXJ2YWxFbnVtLlllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5maWVsZHMubW9udGgubGVuZ3RoID09IDEyICYmXG4gICAgICAgICAgICBhLmZpZWxkcy5kYXlPZk1vbnRoLmxlbmd0aCA9PSAxICYmXG4gICAgICAgICAgICBhLmZpZWxkcy5kYXlPZldlZWsubGVuZ3RoID09IDgpIHtcbiAgICAgICAgICAgIHRhcmdldC5yZWN1cnJlbmNlID0gSW50ZXJ2YWxFbnVtLk1vbnRoO1xuICAgICAgICB9IGVsc2UgaWYgKGEuZmllbGRzLm1vbnRoLmxlbmd0aCA9PSAxMiAmJlxuICAgICAgICAgICAgYS5maWVsZHMuZGF5T2ZNb250aC5sZW5ndGggPT0gMzEgJiZcbiAgICAgICAgICAgIGEuZmllbGRzLmRheU9mV2Vlay5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgdGFyZ2V0LnJlY3VycmVuY2UgPSBJbnRlcnZhbEVudW0uV2VlaztcbiAgICAgICAgfSBlbHNlIGlmIChhLmZpZWxkcy5tb250aC5sZW5ndGggPT0gMTIgJiZcbiAgICAgICAgICAgIGEuZmllbGRzLmRheU9mTW9udGgubGVuZ3RoID09IDMxICYmXG4gICAgICAgICAgICBhLmZpZWxkcy5kYXlPZldlZWsubGVuZ3RoID09IDgpIHtcbiAgICAgICAgICAgIHRhcmdldC5yZWN1cnJlbmNlID0gSW50ZXJ2YWxFbnVtLkRheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5yZWN1cnJlbmNlID0gSW50ZXJ2YWxFbnVtLkN1c3RvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEEgdXRjIHRpbWUgXG4gICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgY29uc3QgdGltZUluVXRjID0gbmV3IERhdGUoRGF0ZS5VVEModG9kYXkuZ2V0RnVsbFllYXIoKSxcbiAgICAgICAgICAgIHRvZGF5LmdldE1vbnRoKCksXG4gICAgICAgICAgICB0b2RheS5nZXREYXRlKCksXG4gICAgICAgICAgICBhLmZpZWxkcy5ob3VyWzBdIHx8IDAsXG4gICAgICAgICAgICBhLmZpZWxkcy5taW51dGVbMF0gfHwgMCkpO1xuICAgICAgICAvLyBUaW1lXG4gICAgICAgIHRhcmdldC50aW1lID0gdGltZUluVXRjO1xuICAgIH1cblxuICAgIGNvbXBvc2VDcm9uRXhwcihzb3VyY2U6IElTY2hlZHVsZVRpbWUpIHtcbiAgICAgICAgLy8gSXNSZWN1cnJlbnQgdHJ1ZVxuXG4gICAgICAgIC8vIENvbnZlcnQgaXQgaW50byBVdGMgdGltZVxuICAgICAgICBjb25zdCB1dGMgPSBuZXcgRGF0ZShzb3VyY2UudGltZSk7XG4gICAgICAgIGNvbnN0IHRpbWVXcmFwcGVyID0gbW9tZW50KHV0Yyk7XG4gICAgICAgIGNvbnN0IGhvdXIgPSB0aW1lV3JhcHBlci51dGMoKS5ob3VyKCk7XG5cbiAgICAgICAgaWYgKHNvdXJjZS5yZWN1cnJlbmNlID09IEludGVydmFsRW51bS5ZZWFyKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dXRjLmdldE1pbnV0ZXMoKX0gJHtob3VyfSAke3NvdXJjZS5kYXlPZk1vbnRofSAke3NvdXJjZS5tb250aE9mWWVhcn0gKmA7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnJlY3VycmVuY2UgPT0gSW50ZXJ2YWxFbnVtLk1vbnRoKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dXRjLmdldE1pbnV0ZXMoKX0gJHtob3VyfSAke3NvdXJjZS5kYXlPZk1vbnRofSAqICpgO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5yZWN1cnJlbmNlID09IEludGVydmFsRW51bS5XZWVrKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dXRjLmdldE1pbnV0ZXMoKX0gJHtob3VyfSAqICogJHtzb3VyY2UuZGF5T2ZXZWVrfWA7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnJlY3VycmVuY2UgPT0gSW50ZXJ2YWxFbnVtLkRheSkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3V0Yy5nZXRNaW51dGVzKCl9ICR7aG91cn0gKiAqICpgO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5yZWN1cnJlbmNlID09IEludGVydmFsRW51bS5DdXN0b20pIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UuY3VzdG9tRXhwcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG4iXX0=