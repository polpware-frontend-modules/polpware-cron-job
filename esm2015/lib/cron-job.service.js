import { Injectable } from '@angular/core';
import { IntervalEnum } from './interfaces';
import { parseExpression } from 'cron-parser';
import * as i0 from "@angular/core";
export class CronJobService {
    constructor() { }
    parseCronExpr(source, target) {
        const a = parseExpression(source);
        // Case 1 (every year)
        if (a.fields.month.length == 1 && a.fields.dayOfMonth.length == 1) {
            target.recurrence = IntervalEnum.Year;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 1 &&
            a.fields.dayOfWeek.length == 8) {
            target.recurrence = IntervalEnum.Month;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 31 &&
            a.fields.dayOfWeek.length == 1) {
            target.recurrence = IntervalEnum.Week;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 31 &&
            a.fields.dayOfWeek.length == 8) {
            target.recurrence == IntervalEnum.Day;
        }
        else {
            target.recurrence = IntervalEnum.Custom;
        }
        // A utc time 
        const today = new Date();
        today.setHours(a.fields.hour[0] || 0);
        today.setMinutes(a.fields.minute[0] || 0);
        // Timezone
        today.setHours((today.getHours() + target.timezone + 24) % 24);
        // Time
        target.time = today;
    }
    composeCronExpr(source) {
        // IsRecurrent true
        // Convert it into Utc time
        const utc = new Date(source.time);
        utc.setHours((utc.getHours() - source.timezone + 24) % 24);
        if (source.recurrence == IntervalEnum.Year) {
            return `${utc.getMinutes()} ${utc.getHours()} ${source.dayOfMonth} ${source.monthOfYear} *`;
        }
        else if (source.recurrence == IntervalEnum.Month) {
            return `${utc.getMinutes()} ${utc.getHours()} ${source.dayOfMonth} * *`;
        }
        else if (source.recurrence == IntervalEnum.Week) {
            return `${utc.getMinutes()} ${utc.getHours()} * * ${source.dayOfWeek}`;
        }
        else if (source.recurrence == IntervalEnum.Day) {
            return `${utc.getMinutes()} ${utc.getHours()} * * *`;
        }
        else if (source.recurrence == IntervalEnum.Custom) {
            return source.customExpr;
        }
        return '';
    }
}
CronJobService.ɵfac = function CronJobService_Factory(t) { return new (t || CronJobService)(); };
CronJobService.ɵprov = i0.ɵɵdefineInjectable({ token: CronJobService, factory: CronJobService.ɵfac, providedIn: 'root' });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(CronJobService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi1qb2Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb2xwd2FyZS9jcm9uLWpvYi8iLCJzb3VyY2VzIjpbImxpYi9jcm9uLWpvYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFpQixZQUFZLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDM0QsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7QUFLOUMsTUFBTSxPQUFPLGNBQWM7SUFFdkIsZ0JBQWdCLENBQUM7SUFFakIsYUFBYSxDQUFDLE1BQWMsRUFBRSxNQUFxQjtRQUMvQyxNQUFNLENBQUMsR0FBRyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFbEMsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQy9ELE1BQU0sQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztTQUN6QzthQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEVBQUU7WUFDbEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUM7WUFDL0IsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNoQyxNQUFNLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7U0FDMUM7YUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFO1lBQ2xDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxFQUFFO1lBQ2hDLENBQUMsQ0FBQyxNQUFN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IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElTY2hlZHVsZVRpbWUsIEludGVydmFsRW51bSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBwYXJzZUV4cHJlc3Npb24gfSBmcm9tICdjcm9uLXBhcnNlcic7XG5cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgQ3JvbkpvYlNlcnZpY2Uge1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIHBhcnNlQ3JvbkV4cHIoc291cmNlOiBzdHJpbmcsIHRhcmdldDogSVNjaGVkdWxlVGltZSkge1xuICAgICAgICBjb25zdCBhID0gcGFyc2VFeHByZXNzaW9uKHNvdXJjZSk7XG5cbiAgICAgICAgLy8gQ2FzZSAxIChldmVyeSB5ZWFyKVxuICAgICAgICBpZiAoYS5maWVsZHMubW9udGgubGVuZ3RoID09IDEgJiYgYS5maWVsZHMuZGF5T2ZNb250aC5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgdGFyZ2V0LnJlY3VycmVuY2UgPSBJbnRlcnZhbEVudW0uWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChhLmZpZWxkcy5tb250aC5sZW5ndGggPT0gMTIgJiZcbiAgICAgICAgICAgIGEuZmllbGRzLmRheU9mTW9udGgubGVuZ3RoID09IDEgJiZcbiAgICAgICAgICAgIGEuZmllbGRzLmRheU9mV2Vlay5sZW5ndGggPT0gOCkge1xuICAgICAgICAgICAgdGFyZ2V0LnJlY3VycmVuY2UgPSBJbnRlcnZhbEVudW0uTW9udGg7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5maWVsZHMubW9udGgubGVuZ3RoID09IDEyICYmXG4gICAgICAgICAgICBhLmZpZWxkcy5kYXlPZk1vbnRoLmxlbmd0aCA9PSAzMSAmJlxuICAgICAgICAgICAgYS5maWVsZHMuZGF5T2ZXZWVrLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICB0YXJnZXQucmVjdXJyZW5jZSA9IEludGVydmFsRW51bS5XZWVrO1xuICAgICAgICB9IGVsc2UgaWYgKGEuZmllbGRzLm1vbnRoLmxlbmd0aCA9PSAxMiAmJlxuICAgICAgICAgICAgYS5maWVsZHMuZGF5T2ZNb250aC5sZW5ndGggPT0gMzEgJiZcbiAgICAgICAgICAgIGEuZmllbGRzLmRheU9mV2Vlay5sZW5ndGggPT0gOCkge1xuICAgICAgICAgICAgdGFyZ2V0LnJlY3VycmVuY2UgPT0gSW50ZXJ2YWxFbnVtLkRheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5yZWN1cnJlbmNlID0gSW50ZXJ2YWxFbnVtLkN1c3RvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEEgdXRjIHRpbWUgXG4gICAgICAgIGNvbnN0IHRvZGF5ID0gbmV3IERhdGUoKTtcbiAgICAgICAgdG9kYXkuc2V0SG91cnMoYS5maWVsZHMuaG91clswXSB8fCAwKTtcbiAgICAgICAgdG9kYXkuc2V0TWludXRlcyhhLmZpZWxkcy5taW51dGVbMF0gfHwgMCk7XG4gICAgICAgIC8vIFRpbWV6b25lXG4gICAgICAgIHRvZGF5LnNldEhvdXJzKCh0b2RheS5nZXRIb3VycygpICsgdGFyZ2V0LnRpbWV6b25lICsgMjQpICUgMjQpO1xuICAgICAgICAvLyBUaW1lXG4gICAgICAgIHRhcmdldC50aW1lID0gdG9kYXk7XG4gICAgfVxuXG4gICAgY29tcG9zZUNyb25FeHByKHNvdXJjZTogSVNjaGVkdWxlVGltZSkge1xuICAgICAgICAvLyBJc1JlY3VycmVudCB0cnVlXG5cbiAgICAgICAgLy8gQ29udmVydCBpdCBpbnRvIFV0YyB0aW1lXG4gICAgICAgIGNvbnN0IHV0YyA9IG5ldyBEYXRlKHNvdXJjZS50aW1lKTtcbiAgICAgICAgdXRjLnNldEhvdXJzKCh1dGMuZ2V0SG91cnMoKSAtIHNvdXJjZS50aW1lem9uZSArIDI0KSAlIDI0KTtcblxuICAgICAgICBpZiAoc291cmNlLnJlY3VycmVuY2UgPT0gSW50ZXJ2YWxFbnVtLlllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt1dGMuZ2V0TWludXRlcygpfSAke3V0Yy5nZXRIb3VycygpfSAke3NvdXJjZS5kYXlPZk1vbnRofSAke3NvdXJjZS5tb250aE9mWWVhcn0gKmA7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnJlY3VycmVuY2UgPT0gSW50ZXJ2YWxFbnVtLk1vbnRoKSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dXRjLmdldE1pbnV0ZXMoKX0gJHt1dGMuZ2V0SG91cnMoKX0gJHtzb3VyY2UuZGF5T2ZNb250aH0gKiAqYDtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UucmVjdXJyZW5jZSA9PSBJbnRlcnZhbEVudW0uV2Vlaykge1xuICAgICAgICAgICAgcmV0dXJuIGAke3V0Yy5nZXRNaW51dGVzKCl9ICR7dXRjLmdldEhvdXJzKCl9ICogKiAke3NvdXJjZS5kYXlPZldlZWt9YDtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UucmVjdXJyZW5jZSA9PSBJbnRlcnZhbEVudW0uRGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dXRjLmdldE1pbnV0ZXMoKX0gJHt1dGMuZ2V0SG91cnMoKX0gKiAqICpgO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5yZWN1cnJlbmNlID09IEludGVydmFsRW51bS5DdXN0b20pIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UuY3VzdG9tRXhwcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG59XG4iXX0=