import { __decorate, __metadata } from "tslib";
import { Injectable } from '@angular/core';
import { IntervalEnum } from '@polpware/fe-utilities';
import { parseExpression } from 'cron-parser';
import * as moment from 'moment';
import * as i0 from "@angular/core";
let CronJobService = class CronJobService {
    constructor() { }
    parseCronExpr(source, target) {
        const a = parseExpression(source);
        // Case 1 (every year)
        if (a.fields.month.length == 1 && a.fields.dayOfMonth.length == 1) {
            target.recurrence = IntervalEnum.Year;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 1 &&
            a.fields.dayOfWeek.length == 8) {
            target.recurrence = IntervalEnum.Month;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 31 &&
            a.fields.dayOfWeek.length == 1) {
            target.recurrence = IntervalEnum.Week;
        }
        else if (a.fields.month.length == 12 &&
            a.fields.dayOfMonth.length == 31 &&
            a.fields.dayOfWeek.length == 8) {
            target.recurrence == IntervalEnum.Day;
        }
        else {
            target.recurrence = IntervalEnum.Custom;
        }
        // A utc time 
        const today = new Date();
        const timeInUtc = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate(), a.fields.hour[0] || 0, a.fields.minute[0] || 0));
        // Time
        target.time = timeInUtc;
    }
    composeCronExpr(source) {
        // IsRecurrent true
        // Convert it into Utc time
        const utc = new Date(source.time);
        const timeWrapper = moment(utc);
        const hour = timeWrapper.utc().hour();
        if (source.recurrence == IntervalEnum.Year) {
            return `${utc.getMinutes()} ${hour} ${source.dayOfMonth} ${source.monthOfYear} *`;
        }
        else if (source.recurrence == IntervalEnum.Month) {
            return `${utc.getMinutes()} ${hour} ${source.dayOfMonth} * *`;
        }
        else if (source.recurrence == IntervalEnum.Week) {
            return `${utc.getMinutes()} ${hour} * * ${source.dayOfWeek}`;
        }
        else if (source.recurrence == IntervalEnum.Day) {
            return `${utc.getMinutes()} ${hour} * * *`;
        }
        else if (source.recurrence == IntervalEnum.Custom) {
            return source.customExpr;
        }
        return '';
    }
};
CronJobService.ɵprov = i0.ɵɵdefineInjectable({ factory: function CronJobService_Factory() { return new CronJobService(); }, token: CronJobService, providedIn: "root" });
CronJobService = __decorate([
    Injectable({
        providedIn: 'root'
    }),
    __metadata("design:paramtypes", [])
], CronJobService);
export { CronJobService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvbi1qb2Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb2xwd2FyZS9jcm9uLWpvYi8iLCJzb3VyY2VzIjpbImxpYi9jcm9uLWpvYi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzlDLE9BQU8sS0FBSyxNQUFNLE1BQU0sUUFBUSxDQUFDOztBQU1qQyxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0lBRXZCLGdCQUFnQixDQUFDO0lBRWpCLGFBQWEsQ0FBQyxNQUFjLEVBQUUsTUFBcUI7UUFDL0MsTUFBTSxDQUFDLEdBQUcsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWxDLHNCQUFzQjtRQUN0QixJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUMvRCxNQUFNLENBQUMsVUFBVSxHQUFHLFlBQVksQ0FBQyxJQUFJLENBQUM7U0FDekM7YUFBTSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFO1lBQ2xDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQU0sSUFBSSxDQUFDO1lBQy9CLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7WUFDaEMsTUFBTSxDQUFDLFVBQVUsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDO1NBQzFDO2FBQU0sSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksRUFBRTtZQUNsQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksRUFBRTtZQUNoQyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQ2hDLE1BQU0sQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztTQUN6QzthQUFNLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEVBQUU7WUFDbEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxJQUFJLEVBQUU7WUFDaEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsRUFBRTtZQUNoQyxNQUFNLENBQUMsVUFBVSxJQUFJLFlBQVksQ0FBQyxHQUFHLENBQUM7U0FDekM7YUFBTTtZQUNILE1BQU0sQ0FBQyxVQUFVLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQztTQUMzQztRQUVELGNBQWM7UUFDZCxNQUFNLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3pCLE1BQU0sU0FBUyxHQUFHLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxFQUNuRCxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQ2hCLEtBQUssQ0FBQyxPQUFPLEVBQUUsRUFDZixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQ3JCLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUIsT0FBTztRQUNQLE1BQU0sQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO0lBQzVCLENBQUM7SUFFRCxlQUFlLENBQUMsTUFBcUI7UUFDakMsbUJBQW1CO1FBRW5CLDJCQUEyQjtRQUMzQixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2hDLE1BQU0sSUFBSSxHQUFHLFdBQVcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUV0QyxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLElBQUksRUFBRTtZQUN4QyxPQUFPLEdBQUcsR0FBRyxDQUFDLFVBQVUsRUFBRSxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxXQUFXLElBQUksQ0FBQztTQUNyRjthQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsSUFBSSxZQUFZLENBQUMsS0FBSyxFQUFFO1lBQ2hELE9BQU8sR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxVQUFVLE1BQU0sQ0FBQztTQUNqRTthQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFO1lBQy9DLE9BQU8sR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksSUFBSSxRQUFRLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztTQUNoRTthQUFNLElBQUksTUFBTSxDQUFDLFVBQVUsSUFBSSxZQUFZLENBQUMsR0FBRyxFQUFFO1lBQzlDLE9BQU8sR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksSUFBSSxRQUFRLENBQUM7U0FDOUM7YUFBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLElBQUksWUFBWSxDQUFDLE1BQU0sRUFBRTtZQUNqRCxPQUFPLE1BQU0sQ0FBQyxVQUFVLENBQUM7U0FDNUI7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7Q0FDSixDQUFBOztBQTNEWSxjQUFjO0lBSDFCLFVBQVUsQ0FBQztRQUNSLFVBQVUsRUFBRSxNQUFNO0tBQ3JCLENBQUM7O0dBQ1csY0FBYyxDQTJEMUI7U0EzRFksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEludGVydmFsRW51bSB9IGZyb20gJ0Bwb2xwd2FyZS9mZS11dGlsaXRpZXMnO1xuaW1wb3J0IHsgcGFyc2VFeHByZXNzaW9uIH0gZnJvbSAnY3Jvbi1wYXJzZXInO1xuaW1wb3J0ICogYXMgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgeyBJU2NoZWR1bGVUaW1lIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBDcm9uSm9iU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgcGFyc2VDcm9uRXhwcihzb3VyY2U6IHN0cmluZywgdGFyZ2V0OiBJU2NoZWR1bGVUaW1lKSB7XG4gICAgICAgIGNvbnN0IGEgPSBwYXJzZUV4cHJlc3Npb24oc291cmNlKTtcblxuICAgICAgICAvLyBDYXNlIDEgKGV2ZXJ5IHllYXIpXG4gICAgICAgIGlmIChhLmZpZWxkcy5tb250aC5sZW5ndGggPT0gMSAmJiBhLmZpZWxkcy5kYXlPZk1vbnRoLmxlbmd0aCA9PSAxKSB7XG4gICAgICAgICAgICB0YXJnZXQucmVjdXJyZW5jZSA9IEludGVydmFsRW51bS5ZZWFyO1xuICAgICAgICB9IGVsc2UgaWYgKGEuZmllbGRzLm1vbnRoLmxlbmd0aCA9PSAxMiAmJlxuICAgICAgICAgICAgYS5maWVsZHMuZGF5T2ZNb250aC5sZW5ndGggPT0gMSAmJlxuICAgICAgICAgICAgYS5maWVsZHMuZGF5T2ZXZWVrLmxlbmd0aCA9PSA4KSB7XG4gICAgICAgICAgICB0YXJnZXQucmVjdXJyZW5jZSA9IEludGVydmFsRW51bS5Nb250aDtcbiAgICAgICAgfSBlbHNlIGlmIChhLmZpZWxkcy5tb250aC5sZW5ndGggPT0gMTIgJiZcbiAgICAgICAgICAgIGEuZmllbGRzLmRheU9mTW9udGgubGVuZ3RoID09IDMxICYmXG4gICAgICAgICAgICBhLmZpZWxkcy5kYXlPZldlZWsubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHRhcmdldC5yZWN1cnJlbmNlID0gSW50ZXJ2YWxFbnVtLldlZWs7XG4gICAgICAgIH0gZWxzZSBpZiAoYS5maWVsZHMubW9udGgubGVuZ3RoID09IDEyICYmXG4gICAgICAgICAgICBhLmZpZWxkcy5kYXlPZk1vbnRoLmxlbmd0aCA9PSAzMSAmJlxuICAgICAgICAgICAgYS5maWVsZHMuZGF5T2ZXZWVrLmxlbmd0aCA9PSA4KSB7XG4gICAgICAgICAgICB0YXJnZXQucmVjdXJyZW5jZSA9PSBJbnRlcnZhbEVudW0uRGF5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LnJlY3VycmVuY2UgPSBJbnRlcnZhbEVudW0uQ3VzdG9tO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQSB1dGMgdGltZSBcbiAgICAgICAgY29uc3QgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBjb25zdCB0aW1lSW5VdGMgPSBuZXcgRGF0ZShEYXRlLlVUQyh0b2RheS5nZXRGdWxsWWVhcigpLFxuICAgICAgICAgICAgdG9kYXkuZ2V0TW9udGgoKSxcbiAgICAgICAgICAgIHRvZGF5LmdldERhdGUoKSxcbiAgICAgICAgICAgIGEuZmllbGRzLmhvdXJbMF0gfHwgMCxcbiAgICAgICAgICAgIGEuZmllbGRzLm1pbnV0ZVswXSB8fCAwKSk7XG4gICAgICAgIC8vIFRpbWVcbiAgICAgICAgdGFyZ2V0LnRpbWUgPSB0aW1lSW5VdGM7XG4gICAgfVxuXG4gICAgY29tcG9zZUNyb25FeHByKHNvdXJjZTogSVNjaGVkdWxlVGltZSkge1xuICAgICAgICAvLyBJc1JlY3VycmVudCB0cnVlXG5cbiAgICAgICAgLy8gQ29udmVydCBpdCBpbnRvIFV0YyB0aW1lXG4gICAgICAgIGNvbnN0IHV0YyA9IG5ldyBEYXRlKHNvdXJjZS50aW1lKTtcbiAgICAgICAgY29uc3QgdGltZVdyYXBwZXIgPSBtb21lbnQodXRjKTtcbiAgICAgICAgY29uc3QgaG91ciA9IHRpbWVXcmFwcGVyLnV0YygpLmhvdXIoKTtcblxuICAgICAgICBpZiAoc291cmNlLnJlY3VycmVuY2UgPT0gSW50ZXJ2YWxFbnVtLlllYXIpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt1dGMuZ2V0TWludXRlcygpfSAke2hvdXJ9ICR7c291cmNlLmRheU9mTW9udGh9ICR7c291cmNlLm1vbnRoT2ZZZWFyfSAqYDtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UucmVjdXJyZW5jZSA9PSBJbnRlcnZhbEVudW0uTW9udGgpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt1dGMuZ2V0TWludXRlcygpfSAke2hvdXJ9ICR7c291cmNlLmRheU9mTW9udGh9ICogKmA7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnJlY3VycmVuY2UgPT0gSW50ZXJ2YWxFbnVtLldlZWspIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt1dGMuZ2V0TWludXRlcygpfSAke2hvdXJ9ICogKiAke3NvdXJjZS5kYXlPZldlZWt9YDtcbiAgICAgICAgfSBlbHNlIGlmIChzb3VyY2UucmVjdXJyZW5jZSA9PSBJbnRlcnZhbEVudW0uRGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7dXRjLmdldE1pbnV0ZXMoKX0gJHtob3VyfSAqICogKmA7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnJlY3VycmVuY2UgPT0gSW50ZXJ2YWxFbnVtLkN1c3RvbSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5jdXN0b21FeHByO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbn1cbiJdfQ==