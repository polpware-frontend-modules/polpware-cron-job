export const defaultDict = {
    polpCronJob: {
        scheduleType: 'Schedule Type',
        recurrence: 'Recurrence',
        customExpr: 'Custom CRON expression',
        startDate: 'Start date',
        inputDate: 'Input one date and confirm',
        monthOfYear: 'Month',
        dayOfMonth: 'Day',
        dayOfWeek: 'Day',
        time: 'Time',
        excludeHolidays: 'Exclude holidays',
        holidayLabel: 'Define the list of holidays',
        excludeWeekends: 'Exclude weekends',
        excludeOthers: 'Other exceptions',
        otherLabel: 'Define the list of exceptions',
        selectOne: 'Select one below',
        endDate: 'End date',
        closeBtn: 'Close',
        cancelBtn: 'Cancel',
        submitBtn: 'Submit',
        confirmBtn: 'Confirm',
        editBtn: 'Edit',
        oneTimeSchedule: 'One time',
        recurrentSchedule: 'Recurrent',
        everyDay: 'Every day',
        everyWeek: 'Every week',
        everyMonth: 'Every month',
        everyYear: 'Every year',
        customInterval: 'Custom',
        January: 'January',
        February: 'February',
        March: 'March',
        April: 'April',
        May: 'May',
        June: 'June',
        July: 'July',
        August: 'August',
        September: 'September',
        October: 'October',
        November: 'November',
        December: 'December',
        Sunday: 'Sunday',
        Monday: 'Monday',
        Tuesday: 'Tuesday',
        Wednesday: 'Wednesday',
        Thursday: 'Thursday',
        Friday: 'Friday',
        Saturday: 'Saturday',
        messages: {
            working: 'Working ...'
        },
        notSetYet: 'Not set yet',
        holidaysEditorTitle: 'Edit holidays',
        othersEditorTitle: 'Edit others',
        errors: {
            general: 'Some of your inputs are not valid. Please check them!',
            customExprInvalid: 'Invalid CRON expression',
            scheduleTypeRequired: 'Please select one schedule type!',
            somethingWrong: 'Something went wrong. Please try later!'
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaTE4bi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3BvbHB3YXJlL2Nyb24tam9iL3NyYy9saWIvaTE4bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxXQUFXLEdBQUc7SUFDdkIsV0FBVyxFQUFFO1FBQ1QsWUFBWSxFQUFFLGVBQWU7UUFDN0IsVUFBVSxFQUFFLFlBQVk7UUFDeEIsVUFBVSxFQUFFLHdCQUF3QjtRQUNwQyxTQUFTLEVBQUUsWUFBWTtRQUN2QixTQUFTLEVBQUUsNEJBQTRCO1FBQ3ZDLFdBQVcsRUFBRSxPQUFPO1FBQ3BCLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLElBQUksRUFBRSxNQUFNO1FBQ1osZUFBZSxFQUFFLGtCQUFrQjtRQUNuQyxZQUFZLEVBQUUsNkJBQTZCO1FBQzNDLGVBQWUsRUFBRSxrQkFBa0I7UUFDbkMsYUFBYSxFQUFFLGtCQUFrQjtRQUNqQyxVQUFVLEVBQUUsK0JBQStCO1FBQzNDLFNBQVMsRUFBRSxrQkFBa0I7UUFDN0IsT0FBTyxFQUFFLFVBQVU7UUFDbkIsUUFBUSxFQUFFLE9BQU87UUFDakIsU0FBUyxFQUFFLFFBQVE7UUFDbkIsU0FBUyxFQUFFLFFBQVE7UUFDbkIsVUFBVSxFQUFFLFNBQVM7UUFDckIsT0FBTyxFQUFFLE1BQU07UUFDZixlQUFlLEVBQUUsVUFBVTtRQUMzQixpQkFBaUIsRUFBRSxXQUFXO1FBQzlCLFFBQVEsRUFBRSxXQUFXO1FBQ3JCLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLGNBQWMsRUFBRSxRQUFRO1FBQ3hCLE9BQU8sRUFBRSxTQUFTO1FBQ2xCLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLEtBQUssRUFBRSxPQUFPO1FBQ2QsS0FBSyxFQUFFLE9BQU87UUFDZCxHQUFHLEVBQUUsS0FBSztRQUNWLElBQUksRUFBRSxNQUFNO1FBQ1osSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsUUFBUTtRQUNoQixTQUFTLEVBQUUsV0FBVztRQUN0QixPQUFPLEVBQUUsU0FBUztRQUNsQixRQUFRLEVBQUUsVUFBVTtRQUNwQixRQUFRLEVBQUUsVUFBVTtRQUNwQixNQUFNLEVBQUUsUUFBUTtRQUNoQixNQUFNLEVBQUUsUUFBUTtRQUNoQixPQUFPLEVBQUUsU0FBUztRQUNsQixTQUFTLEVBQUUsV0FBVztRQUN0QixRQUFRLEVBQUUsVUFBVTtRQUNwQixNQUFNLEVBQUUsUUFBUTtRQUNoQixRQUFRLEVBQUUsVUFBVTtRQUNwQixRQUFRLEVBQUU7WUFDTixPQUFPLEVBQUUsYUFBYTtTQUN6QjtRQUNELFNBQVMsRUFBRSxhQUFhO1FBQ3hCLG1CQUFtQixFQUFFLGVBQWU7UUFDcEMsaUJBQWlCLEVBQUUsYUFBYTtRQUNoQyxNQUFNLEVBQUU7WUFDSixPQUFPLEVBQUUsdURBQXVEO1lBQ2hFLGlCQUFpQixFQUFFLHlCQUF5QjtZQUM1QyxvQkFBb0IsRUFBRSxrQ0FBa0M7WUFDeEQsY0FBYyxFQUFFLHlDQUF5QztTQUM1RDtLQUNKO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkZWZhdWx0RGljdCA9IHtcclxuICAgIHBvbHBDcm9uSm9iOiB7XHJcbiAgICAgICAgc2NoZWR1bGVUeXBlOiAnU2NoZWR1bGUgVHlwZScsXHJcbiAgICAgICAgcmVjdXJyZW5jZTogJ1JlY3VycmVuY2UnLFxyXG4gICAgICAgIGN1c3RvbUV4cHI6ICdDdXN0b20gQ1JPTiBleHByZXNzaW9uJyxcclxuICAgICAgICBzdGFydERhdGU6ICdTdGFydCBkYXRlJyxcclxuICAgICAgICBpbnB1dERhdGU6ICdJbnB1dCBvbmUgZGF0ZSBhbmQgY29uZmlybScsXHJcbiAgICAgICAgbW9udGhPZlllYXI6ICdNb250aCcsXHJcbiAgICAgICAgZGF5T2ZNb250aDogJ0RheScsXHJcbiAgICAgICAgZGF5T2ZXZWVrOiAnRGF5JyxcclxuICAgICAgICB0aW1lOiAnVGltZScsXHJcbiAgICAgICAgZXhjbHVkZUhvbGlkYXlzOiAnRXhjbHVkZSBob2xpZGF5cycsXHJcbiAgICAgICAgaG9saWRheUxhYmVsOiAnRGVmaW5lIHRoZSBsaXN0IG9mIGhvbGlkYXlzJyxcclxuICAgICAgICBleGNsdWRlV2Vla2VuZHM6ICdFeGNsdWRlIHdlZWtlbmRzJyxcclxuICAgICAgICBleGNsdWRlT3RoZXJzOiAnT3RoZXIgZXhjZXB0aW9ucycsXHJcbiAgICAgICAgb3RoZXJMYWJlbDogJ0RlZmluZSB0aGUgbGlzdCBvZiBleGNlcHRpb25zJyxcclxuICAgICAgICBzZWxlY3RPbmU6ICdTZWxlY3Qgb25lIGJlbG93JyxcclxuICAgICAgICBlbmREYXRlOiAnRW5kIGRhdGUnLFxyXG4gICAgICAgIGNsb3NlQnRuOiAnQ2xvc2UnLFxyXG4gICAgICAgIGNhbmNlbEJ0bjogJ0NhbmNlbCcsXHJcbiAgICAgICAgc3VibWl0QnRuOiAnU3VibWl0JyxcclxuICAgICAgICBjb25maXJtQnRuOiAnQ29uZmlybScsXHJcbiAgICAgICAgZWRpdEJ0bjogJ0VkaXQnLFxyXG4gICAgICAgIG9uZVRpbWVTY2hlZHVsZTogJ09uZSB0aW1lJyxcclxuICAgICAgICByZWN1cnJlbnRTY2hlZHVsZTogJ1JlY3VycmVudCcsXHJcbiAgICAgICAgZXZlcnlEYXk6ICdFdmVyeSBkYXknLFxyXG4gICAgICAgIGV2ZXJ5V2VlazogJ0V2ZXJ5IHdlZWsnLFxyXG4gICAgICAgIGV2ZXJ5TW9udGg6ICdFdmVyeSBtb250aCcsXHJcbiAgICAgICAgZXZlcnlZZWFyOiAnRXZlcnkgeWVhcicsXHJcbiAgICAgICAgY3VzdG9tSW50ZXJ2YWw6ICdDdXN0b20nLFxyXG4gICAgICAgIEphbnVhcnk6ICdKYW51YXJ5JyxcclxuICAgICAgICBGZWJydWFyeTogJ0ZlYnJ1YXJ5JyxcclxuICAgICAgICBNYXJjaDogJ01hcmNoJyxcclxuICAgICAgICBBcHJpbDogJ0FwcmlsJyxcclxuICAgICAgICBNYXk6ICdNYXknLFxyXG4gICAgICAgIEp1bmU6ICdKdW5lJyxcclxuICAgICAgICBKdWx5OiAnSnVseScsXHJcbiAgICAgICAgQXVndXN0OiAnQXVndXN0JyxcclxuICAgICAgICBTZXB0ZW1iZXI6ICdTZXB0ZW1iZXInLFxyXG4gICAgICAgIE9jdG9iZXI6ICdPY3RvYmVyJyxcclxuICAgICAgICBOb3ZlbWJlcjogJ05vdmVtYmVyJyxcclxuICAgICAgICBEZWNlbWJlcjogJ0RlY2VtYmVyJyxcclxuICAgICAgICBTdW5kYXk6ICdTdW5kYXknLFxyXG4gICAgICAgIE1vbmRheTogJ01vbmRheScsXHJcbiAgICAgICAgVHVlc2RheTogJ1R1ZXNkYXknLFxyXG4gICAgICAgIFdlZG5lc2RheTogJ1dlZG5lc2RheScsXHJcbiAgICAgICAgVGh1cnNkYXk6ICdUaHVyc2RheScsXHJcbiAgICAgICAgRnJpZGF5OiAnRnJpZGF5JyxcclxuICAgICAgICBTYXR1cmRheTogJ1NhdHVyZGF5JyxcclxuICAgICAgICBtZXNzYWdlczoge1xyXG4gICAgICAgICAgICB3b3JraW5nOiAnV29ya2luZyAuLi4nXHJcbiAgICAgICAgfSxcclxuICAgICAgICBub3RTZXRZZXQ6ICdOb3Qgc2V0IHlldCcsXHJcbiAgICAgICAgaG9saWRheXNFZGl0b3JUaXRsZTogJ0VkaXQgaG9saWRheXMnLFxyXG4gICAgICAgIG90aGVyc0VkaXRvclRpdGxlOiAnRWRpdCBvdGhlcnMnLFxyXG4gICAgICAgIGVycm9yczoge1xyXG4gICAgICAgICAgICBnZW5lcmFsOiAnU29tZSBvZiB5b3VyIGlucHV0cyBhcmUgbm90IHZhbGlkLiBQbGVhc2UgY2hlY2sgdGhlbSEnLFxyXG4gICAgICAgICAgICBjdXN0b21FeHBySW52YWxpZDogJ0ludmFsaWQgQ1JPTiBleHByZXNzaW9uJyxcclxuICAgICAgICAgICAgc2NoZWR1bGVUeXBlUmVxdWlyZWQ6ICdQbGVhc2Ugc2VsZWN0IG9uZSBzY2hlZHVsZSB0eXBlIScsXHJcbiAgICAgICAgICAgIHNvbWV0aGluZ1dyb25nOiAnU29tZXRoaW5nIHdlbnQgd3JvbmcuIFBsZWFzZSB0cnkgbGF0ZXIhJ1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuIl19